---
- name: Ensure common packages are installed
  apt: pkg={{ item }} state=installed update_cache=yes cache_valid_time=3600
  with_items:
    - python-pycurl
  become: true
  tags: postgres_common

- name: Include Debian tasks
  include: debian.yml
  when: ansible_os_family == "Debian"
  tags: postgres_debian

- name: Ensure apt cache is up to date
  apt: update_cache=yes cache_valid_time=3600
  become: true
  tags: postgres_debian

- name: Ensure packages are installed
  apt: pkg={{ item }}
  with_items:
    - postgresql-{{ pg_version }}
    - postgresql-client-{{ pg_version }}
    - python-psycopg2
  register: db_setup
  environment: "{{ pg_proxy_env }}"
  become: true
  tags: postgres_packages

- name: Recreate cluster
  include: recreate_cluster.yml
  when: pg_cluster_recreate
  tags: postgres_cluster

- name: Update pg_hba.conf file
  template:
    src: pg_hba.conf.j2
    dest: "/etc/postgresql/{{ pg_version }}/{{ pg_cluster }}/pg_hba.conf"
    owner: "{{ pg_admin_user }}"
    group: "{{ pg_admin_user }}"
    mode: 0640
    backup: true
  notify: restart postgresql
  become: true
  tags: postgres_config

- name: Update postgres.conf file
  template:
    src: master.conf.j2
    dest: "/etc/postgresql/{{ pg_version }}/{{ pg_cluster }}/postgresql.conf"
    owner: "{{ pg_admin_user }}"
    group: "{{ pg_admin_user }}"
    mode: 0644
    backup: true
  become: true
  notify: restart postgresql
  tags: postgres_config

- name: Ensure ssl cert permissions
  file:
    path="{{ pg_cfg_srv_ssl_cert_file }}"
    owner="{{ pg_admin_user }}"
    group="{{ pg_admin_user }}"
    mode="0600"
  become: true
  when: pg_cfg_srv_ssl_cert_file is defined
  tags: postgres_config

- name: Ensure ssl key permissions
  file:
    path="{{ pg_cfg_srv_ssl_key_file }}"
    owner="{{ pg_admin_user }}"
    group="{{ pg_admin_user }}"
    mode="0600"
  become: true
  when: pg_cfg_srv_ssl_key_file is defined
  tags: postgres_config

- include: extensions_common.yml
  tags: postgres_extensions

- meta: flush_handlers

- name: ensure postgresql server is started
  service:
    name: postgresql
    state: started
    enabled: true
    arguments: "{{ pg_version }}"
    pattern: "/usr/lib/postgresql/{{ pg_version | float }}/bin/postgres -D /var/lib/postgresql/{{ pg_version }}/{{ pg_cluster }}"
  become: true
  tags: postgres_start

- include: postgis.yml
  when: pg_postgis
  tags: postgres_postgis

- name: create users
  become: true
  become_user: postgres
  postgresql_user:
    name: "{{ item.name }}"
    password: "{{ item.password }}"
    role_attr_flags: "{{ item.permissions }}"
    encrypted: "{{ item.password_encrypted|default(no) }}"
  with_items: "{{ pg_users }}"

- name: create replication user
  become: true
  become_user: postgres
  postgresql_user:
    name: "{{ pg_replica_user }}"
    password: "{{ pg_replica_password }}"
    role_attr_flags: "LOGIN,REPLICATION"
    encrypted: "{{ pg_replica_password_encrypted|default(no) }}"
  when: pg_has_replica == true

- name: create databases
  become: true
  become_user: postgres
  postgresql_db:
    name: "{{ item.name }}"
    owner: "{{ item.owner }}"
  with_items: "{{ pg_databases }}"
  when: pg_replica == false

- name: create read-only user
  include: ro-user.yml
  when: pg_ro_user is defined and pg_replica == false

- include_tasks: multi-ro-user.yml
  with_items: "{{ pg_read_only_access }}"
  loop_control:
    loop_var: access
  when: pg_read_only_access is defined and pg_replica == false

- include: postgis-database-setup.yml
  when: pg_postgis and pg_replica == false
  tags: postgres_postgis

- include: uuid-database-setup.yml
  when: pg_uuid and pg_replica == false
  tags: postgres_uuid

- name: Check if zsonlib is installed
  stat:
    path: /usr/lib/postgresql/9.6/lib/zson.so
  register: zson_lib

- include: zson.yml
  when: pg_zson and zson_lib.stat.exists == false
  tags: postgres_zson
